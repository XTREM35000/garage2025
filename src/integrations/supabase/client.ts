// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Variables environnement Supabase manquantes');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
});

// Additional functions for compatibility
export const validateSession = async () => {
  return await supabase.auth.getSession();
};

export const clearSession = async () => {
  return await supabase.auth.signOut();
};

export const createOrganizationWithAdmin = async (orgData: {
  name: string;
  adminEmail: string;
  adminName?: string;
  plan?: string;
  code?: string;
}) => {
  const { data, error } = await supabase.rpc('create_organisation_with_admin', {
    name: orgData.name,
    code: orgData.code || 'ORG012025',
    email: orgData.adminEmail,
    subscription_type: orgData.plan || 'free',
    admin_name: orgData.adminName
  });

  return { data, error };
};

export const getAvailableOrganizations = async () => {
  return await supabase.from('organisations').select('*');
};

export type CreateOrganizationResponse = {
  data: any;
  error: any;
};